{"version":3,"sources":["components/TodoInput.js","components/Todo.js","redux/actionTypes.js","components/TodoList.js","redux/action.js","App.js","redux/reducer.js","redux/root-reducer.js","redux/store.js","reportWebVitals.js","index.js"],"names":["TodoInput","createTodo","useState","task","setTask","className","onSubmit","e","preventDefault","type","placeholder","id","name","value","onChange","target","Todo","toggleTodo","completed","removeTodo","updateTodo","isEditing","setIsEditing","editTask","setEditTask","TransitionGroup","CSSTransition","timeout","classNames","onClick","COMPLETE_TODO","ADD_TODO","REMOVE_TODO","UPDATE_TODO","TodoList","state","useSelector","todos","dispatch","useDispatch","update","updatedTask","types","payload","newTodo","map","todo","completeTodo","App","console","log","initialState","complete","todosReducer","action","uuidv4","addedTodos","filterTodo","filter","t","updatedTodos","toggleTodos","rootReducer","combineReducers","store","createStore","applyMiddleware","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.68f72c90.chunk.js","sourcesContent":["import React, {useState} from \"react\"\r\nimport \"./TodoInput.css\";\r\n\r\nconst TodoInput = ({createTodo}) => {\r\n    const [task, setTask] = useState(\"\");\r\n\r\n    const handleSubmit = (e) => {\r\n      e.preventDefault();\r\n      createTodo(task);\r\n      setTask(\"\");\r\n    };\r\n   return (\r\n       <form className= \"TodoInput\" onSubmit={handleSubmit}>\r\n        <input\r\n        type = \"text\"\r\n        placeholder = \"add a new task\"\r\n        id = \"task\"\r\n        name = \"task\"\r\n        value = {task}\r\n        onChange = {(e) => setTask(e.target.value)}\r\n        />\r\n        <button>Add Todo</button>\r\n       </form>\r\n   );\r\n};\r\n\r\nexport default TodoInput;","import React, {useState} from 'react'\r\nimport \"./Todo.css\";\r\nimport {TransitionGroup, CSSTransition} from \"react-transition-group\";\r\n\r\nconst Todo = ({toggleTodo, task, completed, id, removeTodo, updateTodo}) => {\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const [editTask, setEditTask] = useState(task);\r\n\r\n    const handleUpdate = (e) => {\r\n      e.preventDefault();\r\n      updateTodo(id, editTask);\r\n      setIsEditing(false);\r\n    }\r\n    return (\r\n        <TransitionGroup className= {completed ? \"Todo completed\" : \"Todo\"}>\r\n            {isEditing ? (\r\n            <CSSTransition key= \"editing\" timeout= {500} classNames= \"form\">\r\n                <form className= \"Todo-edit-form\" onSubmit={handleUpdate}>\r\n                    <input\r\n                    type = \"text\"\r\n                    name = \"task\"\r\n                    value = {editTask}\r\n                    onChange = {(e) => setEditTask(e.target.value)}\r\n                    />\r\n                    <button>Save</button>\r\n                </form>\r\n            </CSSTransition>\r\n            ): (\r\n                <CSSTransition key = \"normal\" timeout= {500} classNames=\"task-text\">\r\n                <li className=\"Todo-task\" onClick={toggleTodo}>\r\n                   {task}\r\n                </li>\r\n             </CSSTransition>\r\n            )}\r\n           \r\n            <div className= \"Todo-buttons\">\r\n            <button onClick={() => setIsEditing(true)}>\r\n                  <i className= \"fas fa-pen\"/>\r\n              </button>\r\n              <button onClick={removeTodo}>\r\n                  <i className= \"fas fa-trash\"/>\r\n              </button>\r\n            </div>\r\n        </TransitionGroup>\r\n    );\r\n};\r\n\r\nexport default Todo;\r\n","export const COMPLETE_TODO = \"COMPLETE_TODO\";\r\nexport const ADD_TODO = \"ADD_TODO\";\r\nexport const REMOVE_TODO= \"REMOVE_TODO\";\r\nexport const UPDATE_TODO= \"UPDATE_TODO\";","import React from \"react\";\r\nimport TodoInput  from \"./TodoInput\";\r\nimport Todo from \"./Todo\";\r\nimport \"./TodoList.css\";\r\nimport {CSSTransition, TransitionGroup} from \"react-transition-group\";\r\nimport {useSelector, useDispatch } from \"react-redux\";\r\nimport { completeTodo, addTodo, removeTodo, updateTodo } from \"../redux/action\";\r\n\r\nconst TodoList = () => {\r\n    const state = useSelector((state) => ({ ...state.todos}));\r\n    let dispatch = useDispatch();\r\n\r\n    const create = (newTodo) => {\r\n        dispatch(addTodo(newTodo));\r\n    };\r\n\r\n    const update = (id, updatedTask) => {\r\n        dispatch(updateTodo({id, updatedTask}))\r\n    }\r\n\r\n    return (\r\n        <div className = \"TodoList\">\r\n           <h1>Todo App with React Redux</h1>\r\n           <TodoInput createTodo= {create} />\r\n           <ul>\r\n               <TransitionGroup className = \"todo=list\"> \r\n                 {state.todos && \r\n                 state.todos.map((todo) => {\r\n                     return (\r\n                         <CSSTransition key = {todo.id} classNames= \"todo\">\r\n                          <Todo\r\n                          key= {todo.id}\r\n                          id= {todo.id}\r\n                          task= {todo.task}\r\n                          completed = {todo.completed}\r\n                          toggleTodo= {() => dispatch(completeTodo(todo))}\r\n                          removeTodo= {() => dispatch(removeTodo(todo))}\r\n                          updateTodo= {update}\r\n                          />\r\n                         </CSSTransition>\r\n                     );\r\n                 })}\r\n               </TransitionGroup>\r\n           </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoList;","import * as types from \"./actionTypes\";\r\n\r\nexport const completeTodo = (todo) => ({\r\n    type: types.COMPLETE_TODO,\r\n    payload: todo,\r\n});\r\n\r\n\r\nexport const addTodo = (todo) => ({\r\n    type: types.ADD_TODO,\r\n    payload: todo,\r\n});\r\n\r\nexport const removeTodo = (todo) => ({\r\n    type: types.REMOVE_TODO,\r\n    payload: todo,\r\n});\r\n\r\nexport const updateTodo = (todo) => ({\r\n    type: types.UPDATE_TODO,\r\n    payload: todo,\r\n});","import './App.css';\nimport {useSelector} from \"react-redux\";\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  const state = useSelector((state) => ({...state}));\n  console.log(\"state\", state);\n  return (\n    <div className=\"App\">\n        <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import * as types from \"./actionTypes\";\r\nimport {v4 as uuidv4} from \"uuid\";\r\n\r\nconst initialState = {\r\n    todos: [{id: 1, task: \"Visit Netherlands\", complete: false}],\r\n};\r\n\r\nconst todosReducer = (state = initialState, action) => {\r\n    switch (action.type){\r\n        case types.ADD_TODO:\r\n            const newTodo = {\r\n                id: uuidv4(),\r\n                task: action.payload,\r\n                completed: false,\r\n            };\r\n\r\n            const addedTodos = [...state.todos, newTodo];\r\n            return {\r\n                ...state,\r\n                todos: addedTodos\r\n            };\r\n        case types.REMOVE_TODO:\r\n            const filterTodo = state.todos.filter((t) => t.id !== action.payload.id);\r\n            return{\r\n                ...state,\r\n                todos: filterTodo,\r\n            };\r\n        case types.UPDATE_TODO:\r\n            const updatedTodos = state.todos.map((todo) => {\r\n                if(todo.id === action.payload.id){\r\n                    return{...todo, task: action.payload.updatedTask}\r\n                }\r\n                return todo;\r\n            });\r\n            return{\r\n                ...state, \r\n                todos: updatedTodos,\r\n            };\r\n        case types.COMPLETE_TODO:\r\n            const toggleTodos = state.todos.map((t) =>\r\n            t.id === action.payload.id \r\n            ? {...action.payload, completed: !action.payload.completed} \r\n            : t\r\n            );\r\n            return{\r\n              ...state,\r\n              todos: toggleTodos,\r\n            };\r\n            default:\r\n                return state;\r\n    }\r\n\r\n};\r\n\r\nexport default todosReducer;","import {combineReducers} from \"redux\";\r\n\r\nimport todosReducer from \"./reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    todos: todosReducer,\r\n});\r\n\r\nexport default rootReducer;","import {createStore, applyMiddleware} from \"redux\";\r\nimport logger from \"redux-logger\";\r\n\r\nimport rootReducer from \"./root-reducer\";\r\n\r\nconst middleware = [];\r\n\r\nif(process.env.NODE_ENV === \"development\"){\r\n      middleware.push(logger);\r\n}\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middleware));\r\n\r\nexport default store;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store= {store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n \n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n reportWebVitals();\n"],"sourceRoot":""}